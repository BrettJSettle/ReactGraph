{"version":3,"sources":["assets/util.js","components/FileModal.jsx","assets/defaults.js","components/Toolbar.jsx","components/JsonEditor.jsx","components/ElementSelector.jsx","components/DataEditor.jsx","components/StyleEditor.jsx","components/Editor.jsx","assets/initCy.js","components/Graph.jsx","index.js"],"names":["uuid","replace","c","exp","crypto","getRandomValues","Uint8Array","toString","updateSelector","selector","style","valid","Object","keys","forEach","k","window","cy","parse","s","i","length","values","inputText","index","getSelectorIndex","properties","mappedProperties","oldLength","css","_private","newStyle","EH_CLASSES","HIDDEN_SELECTORS","DEFAULT_SELECTORS","CLASS_REG","getElements","elements","filter","ele","a","classes","b","value","includes","collection","downloadFile","data","name","text","JSON","stringify","element","document","createElement","file","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","EH_NODES","getClassSuggestions","allClasses","Set","item","add","Array","from","getClassesUnion","json","sel","more","match","map","substring","FileImporter","state","invalid","feedback","fileSelected","evt","files","target","console","log","content","setState","isArray","handleLoad","preventDefault","form","f","this","Form","onSubmit","Group","File","id","custom","Input","isValid","isInvalid","onChange","Label","Control","Feedback","Button","className","disabled","React","Component","FileExporter","setType","setStyle","save","handleTypeChange","controlId","as","FileModal","handleClose","Modal","show","onHide","Card","Header","closeButton","Title","Body","ListGroup","variant","Item","LAYOUTS","defaults","LAYOUT_PARAMS","STYLESHEET","LayoutDropdown","apply","layout","params","update","run","DropdownButton","title","ButtonGroup","Dropdown","key","onClick","bind","Divider","alert","search","event","query","getElementById","startBatch","deselect","$","select","fit","endBatch","Toolbar","useState","fileModalVisible","setFileModalVisible","toggleFileModal","Navbar","bg","Brand","Nav","inline","FormControl","placeholder","MODES","JsonEditor","forwardRef","props","ref","allowedModes","extraModes","ace","htmlElementProps","height","theme","sortObjectKeys","history","ElementSelector","selected","selectionChanged","undefined","multiSelectChanged","selectedItems","on","removeListener","items","group","source","label","sort","elementsToItems","el","popover","Popover","Content","showSelectedItems","showSelectedItemsSearch","showSearch","showSelectAll","withGrouping","InputGroup","Append","OverlayTrigger","trigger","placement","overlay","LOCKED_DATA","autocomplete","caseSensitive","getOptions","path","input","editor","field","options","fields","DataEditor","componentDidMount","current","jsonEditor","set","onJsonChange","get","onEditable","node","onSelectionChange","onClassesChange","newValue","labels","v","onCreate","addClass","classItems","cls","createRef","classSuggestions","selectedClasses","x","hasClass","getClassesIntersection","width","minConstraints","maxConstraints","ListGroupItem","isMulti","isDisabled","isClearable","onCreateOption","TYPE_OPTIONS","DEFAULT_COLORS","getSuggestions","enums","number","color","autocompleteStyle","defaultValue","getDefaultProperty","strValue","p","propertyNames","getStyle","styles","NewSelectorModal","selectorInput","setFeedback","existing","invalidated","err","warning","appendFromJson","addStyle","autoFocus","Text","rel","StyleEditor","setSelector","handleDropdownAction","action","newSelectorModal","fromJson","styleChanged","errors","onValidate","push","handleModalClose","selectors","onSelect","e","Toggle","split","Menu","eventKey","Editor","hidden","tab","tabChange","toggle","render","icon","faCog","paddingTop","activeKey","Link","aria-label","aria-hidden","NODE_NUM","initCy","eh_defaults","preview","hoverDelay","noEdgeEventsInDraw","complete","t","added","edgeParams","edgehandles","setTimeout","addNode","renderedPosition","y","cytoscape","use","Graph","stylesheet","App","ReactDOM"],"mappings":"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","file":"static/js/main.109e5ff3.chunk.js","sourcesContent":["\n/* Node UID generator */\nexport const uuid = () => {\n    return ([1e4] + -1e3).replace(/[018]/g, c => {\n        let exp = crypto.getRandomValues(new Uint8Array(1))[0] & 15;\n        exp = exp >> (c / 4);\n        const val = c ^ exp;\n        return val.toString(16)\n    }\n    );\n}\n\nconst getSelectorIndex = (selector) => {\n    const s = window.cy.style();\n    let i = s.length - 1;\n    Object.values(window.cy.style()).forEach(s => {\n        if (!s.selector){\n            return;\n        }\n        if (s.selector.inputText === selector) {\n            i = s.index;\n        }\n    });\n    return i;\n}\n\nexport const updateSelector = (selector, style) => {\n    let valid = true;\n    Object.keys(style).forEach(k => {\n        const p = window.cy.style().parse(k, style[k]);\n        if (!p){\n            valid = false;\n        }\n    });\n    if (!valid){\n        return;\n    }\n\n    const s = window.cy.style();\n    let i = getSelectorIndex(selector);\n    // Reset style.\n    s[i].properties = [];\n    s[i].mappedProperties = [];\n\n    // Apply new style;\n    const oldLength = s.length;\n    s.length = i + 1;    \n    s.css(style);\n    s.length = oldLength;\n    s._private.newStyle = true;\n\n    return s; // chaining\n};\n\nexport const arrayIntersection = (a, b) => {\n    return a.filter(value => b.includes(value))\n}\n\nexport const objectIntersection = (o1, o2) => {\n    return Object.keys(o1).filter({}.hasOwnProperty.bind(o2));\n}\n\nexport const EH_CLASSES = [\n    'eh-handle',\n    // 'eh-source',\n    // 'eh-target',\n    'eh-preview',\n    // 'eh-hover',\n    'eh-ghost-node',\n    'eh-ghost-edge',\n    'eh-ghost',\n    'eh-presumptive-target',\n    'eh-preview-active']\n\nexport const HIDDEN_SELECTORS = [\n    \".eh-handle\",\n    \".eh-hover\",\n    \".eh-source\",\n    \".eh-target\",\n    \".eh-preview, .eh-ghost-edge\",\n    \".eh-ghost-edge.eh-preview-active\"];\n\nexport const DEFAULT_SELECTORS = [\n    'node',\n    'edge'\n];\n\nconst CLASS_REG = /\\.-?[_a-zA-Z]+[_a-zA-Z0-9-]*\\s*/g;\n\n\nexport const getElements = (selector) => {\n    let elements = window.cy.elements(selector || '');\n    elements = elements.filter(ele => {\n        return arrayIntersection(ele.classes(), EH_CLASSES).length === 0;\n    });\n    return window.cy.collection(elements);\n}\n\n\n// Download a JSON object to a file.\nexport const downloadFile = (data, name) => {\n    const text = JSON.stringify(data, null, 2);\n    const element = document.createElement(\"a\");\n    const file = new Blob(\n        [text], { type: 'text/javascript' });\n    element.href = URL.createObjectURL(file);\n    element.download = name + \".json\";\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n}\n\nexport const getClassesUnion = (elements) => {\n    let classes = new Set();\n    elements.forEach((ele, i) => {\n        ele.classes().forEach(item => classes.add(item));\n    });\n    return Array.from(classes);\n}\n\nexport const getClassesIntersection = (elements) => {\n    let classes = new Set();\n    elements.forEach((ele, i) => {\n        if (i === 0){\n            classes = new Set(ele.classes());\n        }else{\n            classes = [...classes].filter(x => ele.hasClass(x));\n        }\n    });\n    return Array.from(classes);\n}\nconst EH_NODES = ['.eh-source', '.eh-target', '.eh-hover']\nexport const getClassSuggestions = () => {\n    let allClasses = getClassesUnion(getElements());\n    window.cy.style().json().forEach(s => {\n        const sel = s.selector;\n        if (EH_NODES.includes(sel)){\n            return;\n        }\n        let more = sel.match(CLASS_REG);\n        if (more && more.length > 0) {\n            more = more.map(s => s.substring(1)).filter(s => !EH_CLASSES.includes(s));\n            allClasses = [...allClasses, ...more];\n        }\n    })\n    return allClasses;\n}","import React from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Card from 'react-bootstrap/Card';\n\nimport { downloadFile } from '../assets/util';\n\nclass FileImporter extends React.Component {\n    state = {\n        invalid: false,\n        feedback: ''\n    };\n\n    fileSelected = (evt) => {\n        const files = evt.target.files;\n        if (files.length !== 1) {\n            return false;\n        }\n        const file = files[0];\n        console.log(file.name);\n        let data = {};\n        try {\n            data = JSON.parse(file.content);\n        } catch {\n            this.setState({\n                invalid: true,\n                feedback: `Unable to parse ${file.name} as JSON.`\n            });\n            return;\n        }\n        let type = 'elements';\n        if (Array.isArray(data)){\n            if ('selector' in data[0]){\n                type = 'style';\n            }\n        }else{\n            if ('selector' in data){\n                type = 'style';\n            }\n        }\n\n        this.setState({\n            invalid: false,\n            feedback: `Loaded ${file.name} as ${type}`\n        });\n    }\n\n    handleLoad = (evt) => {\n        evt.preventDefault();\n        const form = evt.target.form;\n        window.f = form;\n        console.log(form);\n    }\n\n    render() {\n        const {\n            invalid,\n            feedback\n        } = this.state;\n        return (\n            <Form onSubmit={this.handleLoad}>\n                <Form.Group>\n                    <Form.File id=\"formcheck-api-custom\" custom>\n                        <Form.File.Input\n                            isValid={feedback && !invalid}\n                            isInvalid={invalid}\n                            onChange={this.fileSelected} />\n                        <Form.File.Label>\n                            Import Graph/Style JSON\n                </Form.File.Label>\n                        {feedback &&\n                            <Form.Control.Feedback type={invalid ? \"invalid\" : \"valid\"}>\n                                {feedback}\n                            </Form.Control.Feedback>}\n\n                    </Form.File>\n                </Form.Group>\n                <Button className=\"float-right\" disabled={invalid || !feedback} type=\"submit\">Load</Button>\n            </Form>\n        )\n    }\n}\n\nclass FileExporter extends React.Component {\n    state = {\n        type: 'elements',\n    };\n\n    setType = (type) => {\n        this.setState({type});\n    }\n    setStyle = (style) => {\n        this.setState({style});\n    }\n\n    save = (evt) => {\n        evt.preventDefault();\n        const {\n            type,\n        } = this.state;\n        let data = {};\n        if (type === 'elements'){\n            data = window.cy.elements().json();\n        }else if (type === 'style'){\n            data = window.cy.style().json();\n        }\n        downloadFile(data, type);\n    }\n\n    handleTypeChange = (evt) => {\n        const type = evt.target.value;\n        this.setState({type});\n    }\n\n    render(){\n        return (\n            <Form onSubmit={this.save}>\n                <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                    <Form.Label>Export data</Form.Label>\n                    <Form.Control as=\"select\" name=\"type\" onChange={this.handleTypeChange}>\n                        <option value=\"elements\">Elements</option>\n                        <option value=\"style\">Style</option>\n                    </Form.Control>\n                </Form.Group>\n                {/* {type === 'style' &&\n                    <Form.Group>\n                        <Form.Label>Style(s)</Form.Label>\n                        <Form.Control as=\"select\" multiple name=\"style\" defaultValue=\"all\">\n                            <option value=\"all\">All styles</option>\n                            {window.cy.style().json().map((s, i) => (\n                                <option key={i} value={s.selector}>{s.selector}</option>\n                            ))}\n                        </Form.Control></Form.Group>} */}\n\n                <Button className='float-right' type=\"submit\">\n                    Export\n                </Button>\n            </Form>\n        )\n    }\n}\n\nconst FileModal = ({ handleClose }) => {\n    return (\n        <Modal show={true} onHide={handleClose} as={Card}>\n            <Modal.Header as='h4' closeButton>\n                <Modal.Title>Import/Export Graphs and Styles</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <ListGroup variant=\"flush\">\n                    <ListGroup.Item>\n                        <FileImporter />\n                    </ListGroup.Item>\n                    <ListGroup.Item>\n                        <FileExporter />\n                    </ListGroup.Item>\n                </ListGroup>\n            </Modal.Body>\n\n        </Modal>\n    )\n}\n\nexport default FileModal;","\n\nexport const LAYOUTS = [\n    {name: 'Grid', defaults: {name: 'grid'}},\n    {name: 'Circle', defaults: {name: 'circle'}},\n    {name: 'Concentric', defaults: {name: 'concentric'}},\n    {name: 'Random', defaults: {name: 'random'}},\n    {name: 'Preset', defaults: {name: 'preset'}},\n    {name: 'Breadthfirst', defaults: {name: 'breadthfirst'}},\n    {name: 'Cose', defaults: {name: 'cose'}},\n]\n\nexport const LAYOUT_PARAMS = {\n\n}\n\nexport const STYLESHEET = [\n  {\n    selector: 'node',\n    style: {},\n  },\n  {\n      selector: 'edge',\n      style: {\n        'curve-style': 'bezier',\n        'target-arrow-shape': 'triangle'\n      }\n    },\n    {\n      selector: 'node[name]',\n      style: {\n        'content': 'data(name)',\n        'text-valign': 'center'\n      }\n    },\n\n    // some style for the extension\n    {\n      selector: '.eh-handle',\n      style: {\n        'background-color': 'red',\n        'width': 12,\n        'height': 12,\n        'shape': 'ellipse',\n        'overlay-opacity': 0,\n        'border-width': 12, // makes the handle easier to hit\n        'border-opacity': 0\n      }\n    },\n\n    {\n      selector: '.eh-hover',\n      style: {\n        'background-color': 'red'\n      }\n    },\n\n    {\n      selector: '.eh-source',\n      style: {\n        'border-width': 2,\n        'border-color': 'red'\n      }\n    },\n\n    {\n      selector: '.eh-target',\n      style: {\n        'border-width': 2,\n        'border-color': 'red'\n      }\n    },\n\n    {\n      selector: '.eh-preview, .eh-ghost-edge',\n      style: {\n        'background-color': 'red',\n        'line-color': 'red',\n        'target-arrow-color': 'red',\n        'source-arrow-color': 'red'\n      }\n    },\n\n    {\n      selector: '.eh-ghost-edge.eh-preview-active',\n      style: {\n        'opacity': 0\n      }\n    }\n  ];","import React, {useState} from 'react';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\n\nimport FileModal from './FileModal'; \nimport {LAYOUTS, LAYOUT_PARAMS} from '../assets/defaults';\n\nconst LayoutDropdown = () => {\n\n    const edit = () => {\n        alert('Not supported yet');\n    }\n\n    const apply = (layout) => {\n        const params = layout.defaults;\n        if (layout.name in LAYOUT_PARAMS){\n            params.update(LAYOUT_PARAMS[layout.name]);\n        }\n        let runner = window.cy.layout(params);\n        runner.run();\n    }\n\n    return (\n        <DropdownButton\n          title=\"Layout\"\n          variant=\"toolbar-button\"\n          as={ButtonGroup}>\n            {LAYOUTS.map((layout, i) => \n                <Dropdown.Item key={i} value={layout} onClick={apply.bind(null, layout)}>{layout.name}</Dropdown.Item>\n            )}\n            <Dropdown.Divider />\n            <Dropdown.Item onClick={edit}>Edit layouts</Dropdown.Item>\n        </DropdownButton>\n    )\n}\n\nconst search = (event) => {\n    event.preventDefault();\n    const query = document.getElementById('query');\n    window.cy.startBatch();\n    window.cy.elements().deselect();\n    window.cy.$(query.value).select()\n    window.cy.fit();\n    window.cy.endBatch();\n}\n\nconst Toolbar = () => {\n    const [fileModalVisible, setFileModalVisible] = useState(false);\n    const toggleFileModal = () => {\n        setFileModalVisible(!fileModalVisible);\n    }\n    \n    return (\n        <>\n        {fileModalVisible && <FileModal handleClose={toggleFileModal}/>}\n        <Navbar bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand>Graphing</Navbar.Brand>\n            <Nav className=\"mr-auto\" as={ButtonGroup}>\n                <Button variant='toolbar-button' onClick={toggleFileModal}>File</Button>\n                <Button variant='toolbar-button' onClick={() => window.cy.fit()}>Fit</Button>\n                <LayoutDropdown />\n            </Nav>\n            <Form inline onSubmit={search}>\n                <FormControl type=\"text\" id='query' placeholder=\"Search\" className=\"mr-sm-2\" />\n                {/* <Button id='search' type='submit' variant=\"outline-info\">Search</Button> */}\n            </Form>\n        </Navbar>\n        </>\n    );\n}\n\nexport default Toolbar;","import React from 'react';\nimport {JsonEditor as Editor} from 'jsoneditor-react';\n\nimport ace from 'brace';\nimport 'brace/mode/json';\nimport 'brace/theme/github';\n\nconst MODES = ['tree', 'view', 'code', 'text', 'form'];\n\nconst JsonEditor = React.forwardRef((props, ref) => {\n    const allowedModes = [...MODES, ...(props.extraModes || [])];\n    return (\n        <Editor\n            ref={ref}\n            ace={ace}\n            allowedModes={allowedModes}\n            htmlElementProps={{style: {height: '100%'}}}\n            theme=\"ace/theme/github\"\n            sortObjectKeys\n            history\n            {...props}\n            />\n    )\n});\n\nexport default JsonEditor;","import React from 'react';\nimport MultiSelect from \"@kenshooui/react-multi-select\";\n\nimport Button from 'react-bootstrap/Button';\nimport FormControl from 'react-bootstrap/FormControl';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Popover from 'react-bootstrap/Popover';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport {getElements} from '../assets/util';\n\nimport \"@kenshooui/react-multi-select/dist/style.css\"\n\n\nconst elementsToItems = (elements) => {\n    const items = elements.map((ele, i) => {\n        const name = ele.data('name');\n        if (ele.group() === 'edges'){\n            const source = ele.source().data('name');\n            const target = ele.target().data('name');\n            return {\n                id: i, \n                label: `${source} (${name}) ${target}`,\n                group: ele.group(),\n                element: ele\n            }\n        }\n        return {\n            id: i, label: name, group: ele.group(), element: ele\n        }\n    });\n    items.sort((a, b) => a.name > b.name);\n    return items;\n}\n\n\nexport default class ElementSelector extends React.Component {\n    state = {\n        selected: []\n    };\n\n    componentDidMount() {\n        window.cy.on('select unselect', this.selectionChanged);\n    }\n    componentWillUnmount() {\n        window.cy.removeListener('select unselect', this.selectionChanged);\n    }\n\n\n\n    selectionChanged = (event, selected) => {\n        if (selected === undefined){\n            selected = getElements(':selected');\n        }\n        this.setState({selected})\n        this.props.onChange(selected);\n    }\n\n    multiSelectChanged = (selectedItems) => {\n        const elements = window.cy.collection(selectedItems.map(ele => ele.element));\n\n        window.cy.startBatch();\n        window.cy.elements().deselect();\n        elements.select();\n        window.cy.endBatch();\n\n        this.selectionChanged(null, elements);\n    }\n\n    render() {\n        const elements = getElements();\n        const items = elementsToItems(elements);\n        const selectedItems = items.filter(el => el.element.selected())\n        const popover = (\n            <Popover>\n                <Popover.Content>\n                <MultiSelect\n                    items={items}\n                    showSelectedItems={true}\n                    showSelectedItemsSearch={true}\n                    showSearch={true}\n                    showSelectAll={true}\n                    selectedItems={selectedItems}\n                    withGrouping\n                    onChange={this.multiSelectChanged}/>\n                </Popover.Content>\n            </Popover>\n        )\n\n        return (\n            <InputGroup>\n                <FormControl\n                    disabled\n                    placeholder=\"Search\"\n                    value={`${selectedItems.length} elements selected`}\n                />\n                <InputGroup.Append>\n                    <OverlayTrigger trigger=\"click\" placement=\"bottom\" overlay={popover}>\n                        <Button>Select</Button>\n                    </OverlayTrigger>\n                </InputGroup.Append>\n            </InputGroup>\n        )\n    }\n}\n","import React, {createRef} from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport ListGroupItem from 'react-bootstrap/ListGroupItem';\nimport { ResizableBox } from 'react-resizable';\nimport CreatableSelect from 'react-select/creatable';\n\nimport JsonEditor from './JsonEditor';\nimport ElementSelector from './ElementSelector';\nimport { getElements, getClassSuggestions, getClassesIntersection } from '../assets/util';\n\nconst LOCKED_DATA = ['id', 'source', 'target'];\n\nconst autocomplete = {\n    filter: 'contain',\n    trigger: 'focus',\n    caseSensitive: false,\n    getOptions: (text, path, input, editor) => {\n        if (input === 'value'){\n            const field = path[1];\n            let options = new Set();\n            // Add values from other elements.\n            window.cy.elements().forEach(ele => {\n                let s = ele.data(field);\n                console.log(s)\n                if (s && typeof(s) !== 'object'){\n                    options.add(s);\n                }\n            });\n            return Array.from(options);\n        }else if (input === 'field'){\n            let fields = new Set();\n            window.cy.elements().forEach(ele => {\n                Object.keys(ele.data()).forEach(name => fields.add(name));\n            })\n            return Array.from(fields);\n        }\n        return [];\n    }\n}\n\nexport default class DataEditor extends React.Component {\n    /*\n    DataEditor:\n        Select: Subset of nodes, edges (use selected)\n        Editor:\n            - classes as badges\n            - Data json\n    */\n    constructor(props) {\n        super(props);\n        this.state = {\n            selected: window.cy.collection()\n        }\n        this.editor = createRef();\n    }\n\n    componentDidMount = () => {\n        const selected = getElements(':selected');\n        const data = selected.map(item => item.data());\n        this.editor.current.jsonEditor.set(data);\n        this.setState({selected});\n    }\n\n    onJsonChange = () => {\n        const jsons = this.editor.current.jsonEditor.get();\n        jsons.forEach(data => {\n            const ele = window.cy.$('#' + data.id);\n            ele.data(data);\n        })\n    }\n\n    onEditable = (node) => {\n        if (node.path && node.path.length === 2){\n            return !LOCKED_DATA.includes(node.field);\n        }\n        return true;\n    }\n    \n    onSelectionChange = (selected) => {\n        const data = selected.map(item => item.data());\n        this.editor.current.jsonEditor.set(data);\n        this.setState({selected});\n    }\n\n    onClassesChange = (newValue) => {\n        const {\n            selected\n        } = this.state;\n        let labels = [];\n        if (newValue){\n            labels = newValue.map(v => v['value']);\n        }\n        selected.classes(labels)\n        // Force update.\n        this.setState(this.state);\n    }\n\n    onCreate = (newValue) => {\n        const {\n            selected\n        } = this.state;\n        selected.addClass([newValue]);\n        // Force update.\n        this.setState(this.state);\n    }\n\n    classItems = (classes) => {\n        return classes.map(cls => { return {value: cls, label: cls}});\n    }\n\n    render() {\n        const {\n            selected\n        } = this.state;\n        let classSuggestions = getClassSuggestions();\n        let selectedClasses = getClassesIntersection(getElements(':selected'));\n        classSuggestions = this.classItems(classSuggestions);\n        selectedClasses = this.classItems(selectedClasses);\n        return (\n            <>\n                <ResizableBox width={500} height={400}\n                    minConstraints={[280, 250]}\n                    maxConstraints={[1000, 1000]}>\n                    <ListGroup style={{ height: \"100%\" }}>\n                        <ListGroupItem>\n                            <ElementSelector \n                                onChange={this.onSelectionChange}/>\n                        </ListGroupItem>\n                        <ListGroupItem>\n                            <CreatableSelect\n                                isMulti\n                                isDisabled={selected.length === 0}\n                                isClearable\n                                onChange={this.onClassesChange}\n                                onCreateOption={this.onCreate}\n                                options={classSuggestions}\n                                value={selectedClasses}\n                                />\n                        </ListGroupItem>\n                        <ListGroupItem style={{ height: \"100%\" }}>\n                            <JsonEditor\n                                ref={this.editor}\n                                onEditable={this.onEditable}\n                                onChange={this.onJsonChange}\n                                autocomplete={autocomplete}\n                            />\n                        </ListGroupItem>\n                        </ListGroup>\n                </ResizableBox>\n            </>\n                    )\n                }\n            }\n","import React, { createRef, useState } from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport ListGroupItem from 'react-bootstrap/ListGroupItem';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport FormControl from 'react-bootstrap/FormControl';\nimport { ResizableBox } from 'react-resizable';\nimport parse from 'cytoscape/src/selector/parse';\n\nimport JsonEditor from './JsonEditor';\nimport { HIDDEN_SELECTORS, DEFAULT_SELECTORS, updateSelector } from '../assets/util';\n\nlet TYPE_OPTIONS = null;\n\nconst getTypeOptions = (name) => {\n    if (TYPE_OPTIONS === null){\n        TYPE_OPTIONS = {};\n        window.cy.style().properties.forEach(p => {\n            TYPE_OPTIONS[p.name] = p.type\n        });\n    }\n    return getSuggestions(TYPE_OPTIONS[name]);\n}\n\nconst DEFAULT_COLORS = [\n    'red',\n    'orange',\n    'yellow',\n    'green',\n    'blue',\n    'purple',\n    'white',\n    'black',\n    'pink',\n    'cyan',\n    'magenta',\n    [200, 20, 50, 120],\n    '#0A0A4b'\n]\nconst getSuggestions = (type) => {\n    if (!type){\n        return []\n    }\n    if (type.enums){\n        return type.enums;\n    }\n    if (type.number){\n        return [0]\n    }\n    if (type.color){\n        return DEFAULT_COLORS;\n    }\n    return []\n}\n\nconst autocompleteStyle = {\n    filter: 'contain',\n    trigger: 'focus',\n    caseSensitive: false,\n    getOptions: (text, path, input, editor) => {\n        if (input === 'value'){\n            const field = path[0];\n            let options = new Set();\n            // Add from default properties.\n            let defaultValue = window.cy.style().getDefaultProperty(field);\n            if (defaultValue !== undefined){\n                options.add(defaultValue.strValue);\n                options.add(defaultValue.value);\n            }\n            // Add values from types list\n            getTypeOptions(field).forEach(name => options.add(name))\n\n            // Add values from other elements.\n            window.cy.elements().forEach(ele => {\n                options.add(ele.style(field));\n            });\n            return Array.from(options);\n        }else if (input === 'field'){\n            return window.cy.style().propertyNames;\n        }\n        return [];\n    }\n}\n\nconst addStyle = (selector, style) => {\n    let warning = '';\n    if (!parse.parse(selector)){\n        warning = `'${selector}' is not a valid selector.`;\n    }\n    if (!warning) {\n        window.cy.style().appendFromJson([{ selector, style }]);\n    }\n    return warning;\n}\n\nconst getStyle = (selector) => {\n    const styles = window.cy.style().json().filter(s => s.selector === selector);\n    if (styles.length > 0) {\n        return styles[0].style;\n    }\n    return {};\n}\n\nconst NewSelectorModal = ({ defaultValue, handleClose, show }) => {\n    const selectorInput = createRef();\n    const [feedback, setFeedback] = useState('');\n    const existing = window.cy.style().json().map(s => s.selector);\n\n    const onSubmit = (evt) => {\n        evt.preventDefault();\n        const name = selectorInput.current.value;\n        if (existing.includes(name)) {\n            setFeedback('Error: Style selector already exists.');\n            return;\n        }\n        const style = getStyle(defaultValue);\n        const err = addStyle(name, style);\n        if (err) {\n            setFeedback(`Error: ${err}`);\n        } else {\n            handleClose(evt, name);\n        }\n    }\n\n    return (\n        <Modal show={show} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>Create Stylesheet</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form invalidated={feedback} onSubmit={onSubmit}>\n                    <Form.Group autoFocus controlId=\"selector-input\">\n                        <Form.Label>Style selector</Form.Label>\n                        <InputGroup className=\"mb-3\">\n                            <FormControl isInvalid={feedback !== ''} ref={selectorInput} defaultValue={defaultValue} placeholder=\"Selector name\" />\n                            <InputGroup.Append>\n                                <Button type=\"submit\">Create</Button>\n                            </InputGroup.Append>\n                            <Form.Control.Feedback type=\"invalid\">\n                                {feedback}\n                            </Form.Control.Feedback>\n                        </InputGroup>\n                        <Form.Text className=\"text-muted\">\n                            Examples: .className, node[height &lt; 100], and\n                            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://js.cytoscape.org/#selectors\">many more</a>\n                        </Form.Text>\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n        </Modal>);\n}\n\nexport default class StyleEditor extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.editor = createRef();\n        this.state = {\n            selector: null,\n            newSelectorModal: null\n        };\n        window.editor = this.editor;\n        this.errors = []\n    }\n\n    setSelector = (selector) => {\n        const style = getStyle(selector);\n        this.editor.current.jsonEditor.set(style);\n        this.setState({ selector });\n    }\n\n    handleDropdownAction = (event) => {\n        const {\n            selector\n        } = this.state;\n        let action = event;\n        if (event.target) {\n            action = event.target.value;\n        }\n        let newSelectorModal = {}\n        if (action === 'add') {\n            newSelectorModal['show'] = true;\n        } else if (action === 'copy') {\n            newSelectorModal['show'] = true;\n            newSelectorModal['defaultValue'] = this.state.selector;\n        } else if (action === 'delete') {\n            const styles = window.cy.style().json().filter(s => s.selector !== selector);\n            window.cy.style().fromJson(styles).update();\n            this.setState({ selector: 'node' });\n        }\n        this.setState({ newSelectorModal })\n    }\n\n    styleChanged = (event) => {\n        this.setSelector(event.target.value);\n    }\n\n    onChange = (newStyle) => {\n        const {\n            selector\n        } = this.state;\n        // const styles = window.cy.style().json();\n        // let curStyle = styles.filter(s => s.selector === selector);\n        // curStyle = curStyle[0].style;\n        \n        // Object.keys(newStyle).forEach(k => {\n        //     const val = newStyle[k];\n        //     if (curStyle[k] !== val){\n\n        //     }\n        // })\n        if (this.errors.length === 0){\n            updateSelector(selector, newStyle).update();\n        }\n    }\n\n    onValidate = (json) => {\n        var errors = [];\n\n        Object.keys(json).forEach(k => {\n            const v = window.cy.style().parse(k, json[k]);\n            if (!v){\n                errors.push({path: [k], 'message': 'Invalid property.'});\n            }\n        });\n        this.errors = errors;\n        return errors;\n    }\n\n    handleModalClose = (evt, name) => {\n        this.setState({\n            selector: name || this.state.selector,\n            newSelectorModal: null\n        })\n    }\n\n    render() {\n        const {\n            selector,\n            newSelectorModal\n        } = this.state;\n\n        const selectors = window.cy.style().json()\n            .filter(s => !HIDDEN_SELECTORS.includes(s.selector));\n\n        return (\n            <>\n                <NewSelectorModal\n                    handleClose={this.handleModalClose}\n                    {...newSelectorModal}\n                />\n                <ResizableBox width={500} height={400}\n                    minConstraints={[280, 250]}\n                    maxConstraints={[1000, 1000]}>\n                    <ListGroup style={{ height: \"100%\" }}>\n                        <ListGroupItem>\n                            <InputGroup>\n                                <Form.Control\n                                    as=\"select\"\n                                    placeholder=\"Style\"\n                                    defaultValue=\"0\"\n                                    onChange={this.styleChanged}>\n                                    <option disabled value=\"0\"> - Style selectors - </option>\n                                    {selectors.map((s, i) => {\n                                        return (\n                                            <option\n                                                key={i}\n                                                value={s.selector}>\n                                                {s.selector}\n                                            </option>);\n                                    })}\n                                </Form.Control>\n                                <Dropdown as={InputGroup.Append} onSelect={this.handleDropdownAction}>\n                                    <Button onClick={e => this.handleDropdownAction('add')}>Add</Button>\n                                    <Dropdown.Toggle split />\n                                    <Dropdown.Menu>\n                                        <Dropdown.Item disabled={selector === null} eventKey=\"copy\">Copy</Dropdown.Item>\n                                        <Dropdown.Item disabled={selector === null || DEFAULT_SELECTORS.includes(selector)} eventKey=\"delete\">Delete</Dropdown.Item>\n                                    </Dropdown.Menu>\n                                </Dropdown>\n                            </InputGroup>\n                        </ListGroupItem>\n                        <ListGroupItem style={{ height: \"100%\" }}>\n                            <JsonEditor\n                                ref={this.editor}\n                                onValidate={this.onValidate}\n                                onChange={this.onChange}\n                                autocomplete={autocompleteStyle}\n                            />\n                        </ListGroupItem>\n                    </ListGroup>\n                </ResizableBox>\n            </>\n        )\n    }\n}\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport Nav from 'react-bootstrap/Nav';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCog } from '@fortawesome/free-solid-svg-icons'\n\nimport DataEditor from './DataEditor';\nimport StyleEditor from './StyleEditor';\nimport 'react-resizable/css/styles.css';\n\nimport 'jsoneditor-react/es/editor.min.css';\n\nexport default class Editor extends React.Component {\n    state = {\n        hidden: false,\n        tab: 'style'\n    };\n\n    tabChange = (tab) => {\n        this.setState({tab})\n    }\n\n    toggle = () => {\n        const {hidden} = this.state;\n        this.setState({hidden: !hidden});\n    }\n\n    render = () => {\n        const {\n            hidden,\n            tab\n        } = this.state;\n        \n        if (hidden){\n            return (\n            <button type=\"button\" className=\"btn btn-dark\" id=\"editor-button\" onClick={this.toggle}>\n                <FontAwesomeIcon icon={faCog} />\n            </button>);\n        }\n\n        return (\n            <Card id=\"editor\">\n                <Card.Header style={{paddingTop: '.1rem'}}>\n                    <Nav variant=\"tabs\" activeKey={tab} onSelect={this.tabChange}>\n                        <Nav.Item>\n                            <Nav.Link eventKey=\"data\">Data</Nav.Link>\n                        </Nav.Item>\n                        <Nav.Item>\n                            <Nav.Link eventKey=\"style\">Style</Nav.Link>\n                        </Nav.Item>\n                        <Button className=\"close ml-auto\" onClick={this.toggle} aria-label=\"Close\">\n                            <span aria-hidden=\"true\">&times;</span>\n                        </Button>\n                    </Nav>\n                </Card.Header>\n                {tab === 'data' && <DataEditor/>}\n                {tab === 'style' && <StyleEditor/>}\n            </Card>\n            )\n    }\n}","import {uuid} from './util';\n\nlet NODE_NUM = 0;\n\nexport const initCy = (cy) => {\n    if (window.cy){\n        return;\n    }\n    window.cy = cy;\n\n    const eh_defaults = {\n        preview: false, // whether to show added edges preview before releasing selection\n        hoverDelay: 150, // time spent hovering over a target node before it is considered selected\n        noEdgeEventsInDraw: true, // set events:no to edges during draws, prevents mouseouts on compounds\n        complete: (s, t, added) => {\n            added.select();\n        }, edgeParams: (s, t) => {\n            return {data: { \n                id: uuid(),\n                name: ''\n            }}\n        }\n    };\n    cy.edgehandles(eh_defaults);\n\n    const addNode = (data) => {\n        const node = cy.add({\n            group: \"nodes\",\n            ...data\n        });\n        setTimeout(() => node.select(), 100);\n    };\n\n    cy.on(\"tap\", function(e) {\n        var target = e.target;\n        if (target === cy){\n            addNode({\n                data: {\n                    id: uuid(),\n                    name: `New Node ${NODE_NUM++}`\n                }, renderedPosition: {\n                    x: e.renderedPosition.x,\n                    y: e.renderedPosition.y\n                }\n            });\n        }\n    });\n}","import React from 'react';\nimport cytoscape from 'cytoscape';\nimport CytoComponent from 'react-cytoscapejs';\nimport edgehandles from 'cytoscape-edgehandles';\n\nimport Editor from './Editor';\n\nimport {initCy} from '../assets/initCy';\nimport {STYLESHEET} from '../assets/defaults';\n\ncytoscape.use( edgehandles );\n\nexport default class Graph extends React.Component {\n    constructor(){\n        super();\n        this.state = {\n            cy: null\n        }\n    }\n\n    onCreate = (cy) => {\n        if (this.state.cy){\n            return;\n        }\n        initCy(cy);\n        this.setState({cy});\n    }\n\n    render(){\n        const {\n            cy\n        } = this.state;\n        return (\n            <>\n                <CytoComponent \n                    id=\"cyto\"\n                    stylesheet={STYLESHEET}\n                    cy={this.onCreate}\n                    elements={[]}\n                />\n                {cy && <Editor />}\n            </>\n        )\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Toolbar from './components/Toolbar';\nimport Graph from './components/Graph';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './assets/variants.css';\nimport './index.css';\n\nconst App = () => {\n\n  return (\n    <div className=\"content\">\n      <Toolbar />\n      <div id=\"cy-wrapper\">\n        <Graph />\n      </div>\n    </div>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}